{"name":"Git::Wrapper","body":"# NAME\r\n\r\nGit::Wrapper - Wrap git(7) command-line interface\r\n\r\n# VERSION\r\n\r\nversion 0.019\r\n\r\n# SYNOPSIS\r\n\r\n    my $git = Git::Wrapper->new('/var/foo');\r\n\r\n    $git->commit(...)\r\n    print $_->message for $git->log;\r\n\r\n# DESCRIPTION\r\n\r\nGit::Wrapper provides an API for git(7) that uses Perl data structures for\r\nargument passing, instead of CLI-style `--options` as [Git](http://search.cpan.org/perldoc?Git) does.\r\n\r\n# METHODS\r\n\r\nExcept as documented, every git subcommand is available as a method on a\r\nGit::Wrapper object.  Replace any hyphens in the git command with underscores.\r\n\r\nThe first argument should be a hashref containing options and their values.\r\nBoolean options are either true (included) or false (excluded).  The remaining\r\narguments are passed as ordinary command arguments.\r\n\r\n    $git->commit({ all => 1, message => \"stuff\" });\r\n\r\n    $git->checkout(\"mybranch\");\r\n\r\n_N.b._ Because of the way arguments are parsed, should you need to pass an\r\nexplicit '0' value to an option (for example, to have the same effect as\r\n`--abrrev=0` on the command line), you should pass it with a leading space, like so:\r\n\r\n    $git->describe({ abbrev => ' 0' };\r\n\r\nOutput is available as an array of lines, each chomped.\r\n\r\n    @sha1s_and_titles = $git->rev_list({ all => 1, pretty => 'oneline' });\r\n\r\nIf a git command exits nonzero, a `Git::Wrapper::Exception` object will be\r\nthrown.  It has three useful methods:\r\n\r\n- error\r\n\r\nerror message\r\n\r\n- output\r\n\r\nnormal output, as a single string\r\n\r\n- status\r\n\r\nthe exit status\r\n\r\nThe exception stringifies to the error message.\r\n\r\n## new\r\n\r\n    my $git = Git::Wrapper->new($dir);\r\n\r\n## dir\r\n\r\n    print $git->dir; # /var/foo\r\n\r\n## version\r\n\r\n    my $version = $git->version; # 1.6.1.4.8.15.16.23.42\r\n\r\n## log\r\n\r\n    my @logs = $git->log;\r\n\r\nInstead of giving back an arrayref of lines, the `log` method returns a list\r\nof `Git::Wrapper::Log` objects.  They have four methods:\r\n\r\n- id\r\n- author\r\n- date\r\n- message\r\n\r\n## has\\_git\\_in\\_path\r\n\r\nThis method returns a true or false value indicating if there is a 'git'\r\nbinary in the current $PATH.\r\n\r\n## supports\\_status\\_porcelain\r\n\r\n## supports\\_log\\_raw\\_dates\r\n\r\nThese methods return a true or false value (1 or 0) indicating whether the git\r\nbinary being used has support for these options. (The '--porcelain' option on\r\n'git status' and the '--date=raw' option on 'git log', respectively.)\r\n\r\nThese are primarily for use in this distribution's test suite, but may also be\r\nuseful when writing code using Git::Wrapper that might be run with different\r\nversions of the underlying git binary.\r\n\r\n## status\r\n\r\nWhen running with an underlying git binary that returns false for the\r\n[\"supports\\_status\\_porcelain\"](#supports\\_status\\_porcelain) method, this method will act like any other\r\nwrapped command: it will return output as an array of chomped lines.\r\n\r\nWhen running with an underlying git binary that returns true for the\r\n[\"supports\\_status\\_porcelain\"](#supports\\_status\\_porcelain) method, this method instead returns an\r\ninstance of Git::Wrapper::Statuses:\r\n\r\n    my $statuses = $git->status;\r\n\r\nGit::Wrapper:Statuses has two public methods. First, `is_dirty`:\r\n\r\n    my $dirty_flag = $statuses->is_dirty;\r\n\r\nwhich returns a true/false value depending on whether the repository has any\r\nuncommitted changes.\r\n\r\nSecond, `get`:\r\n\r\n    my @status = $statuses->get($group)\r\n\r\nwhich returns an array of Git::Wrapper::Status objects, one per file changed.\r\n\r\nThere are four status groups, each of which may contain zero or more changes.\r\n\r\n- indexed : Changed & added to the index (aka, will be committed)\r\n- changed : Changed but not in the index (aka, won't be committed)\r\n- unknown : Untracked files\r\n- conflict : Merge conflicts\r\n\r\nNote that a single file can occur in more than one group.  Eg, a modified file\r\nthat has been added to the index will appear in the 'indexed' list.  If it is\r\nsubsequently further modified it will additionally appear in the 'changed'\r\ngroup.\r\n\r\nA Git::Wrapper::Status object has three methods you can call:\r\n\r\n    my $from = $status->from;\r\n\r\nThe file path of the changed file, relative to the repo root.  For renames,\r\nthis is the original path.\r\n\r\n    my $to = $status->to;\r\n\r\nRenames returns the new path/name for the path.  In all other cases returns\r\nan empty string.\r\n\r\n    my $mode = $status->mode;\r\n\r\nIndicates what has changed about the file.\r\n\r\nWithin each group (except 'conflict') a file can be in one of a number of\r\nmodes, although some modes only occur in some groups (eg, 'added' never appears\r\nin the 'unknown' group).\r\n\r\n- modified\r\n- added\r\n- deleted\r\n- renamed\r\n- copied\r\n- conflict\r\n\r\nAll files in the 'unknown' group will have a mode of 'unknown' (which is\r\nredundant but at least consistent).\r\n\r\nThe 'conflict' group instead has the following modes.\r\n\r\n- 'both deleted' : deleted on both branches\r\n- 'both added'   : added on both branches\r\n- 'both modified' : modified on both branches\r\n- 'added by us'  : added only on our branch\r\n- 'deleted by us' : deleted only on our branch\r\n- 'added by them' : added on the branch we are merging in\r\n- 'deleted by them' : deleted on the branch we are merging in\r\n\r\nSee git-status man page for more details.\r\n\r\n### Example\r\n\r\n    my $git = Git::Wrapper->new('/path/to/git/repo');\r\n    my $statuses = $git->status;\r\n    for my $type (qw<indexed changed unknown conflict>) {\r\n        my @states = $statuses->get($type)\r\n            or next;\r\n        print \"Files in state $type\\n\";\r\n        for (@states) {\r\n            print '  ', $_->mode, ' ', $_->from;\r\n            print ' renamed to ', $_->to\r\n                if $_->mode eq 'renamed';\r\n            print \"\\n\";\r\n        }\r\n    }\r\n\r\n## RUN\r\n\r\nThis method bypasses the output rearranging performed by some of the wrapped\r\nmethods described above (i.e., `log`, `status`, etc.). This can be useful\r\nin various situations, such as when you want to produce a particular log\r\noutput format that isn't compatible with the way `Git::Wrapper` constructs\r\n`Git::Wrapper::Log`, or when you want raw `git status` output that isn't\r\nparsed into a <Git::Wrapper::Status> object.\r\n\r\nThis method should be called with an initial string argument of the `git`\r\nsubcommand you want to run, followed by a hashref containing options and their\r\nvalues, and then a list of any other arguments.\r\n\r\n### Example\r\n\r\n    my $git = Git::Wrapper->new( '/path/to/git/repo' );\r\n\r\n    # the 'log' method returns Git::Wrapper::Log objects\r\n    my @log_objects = $git->log();\r\n\r\n    # while 'RUN('log')' returns an array of chomped lines\r\n    my @log_lines = $git->RUN('log');\r\n\r\n## ERR\r\n\r\nAfter a command has been run, this method will return anything that was sent\r\nto `STDERR`, in the form of an array of chomped lines. This information will\r\nbe cleared as soon as a new command is executed. This method should __\\*NOT\\*__\r\nbe used as a success/failure check, as `git` will sometimes produce output on\r\nSTDERR when a command is successful.\r\n\r\n## OUT\r\n\r\nAfter a command has been run, this method will return anything that was sent\r\nto `STDOUT`, in the form of an array of chomped lines. It is identical to\r\nwhat is returned from the method call that runs the command, and is provided\r\nsimply for symmetry with the `ERR` method. This method should __\\*NOT\\*__ be\r\nused as a success/failure check, as `git` will frequently not have any output\r\nwith a successful command.\r\n\r\n# COMPATIBILITY\r\n\r\nOn Win32 Git::Wrapper is incompatible with msysGit installations earlier than\r\nGit-1.7.1-preview20100612 due to a bug involving the return value of a git\r\ncommand in cmd/git.cmd.  If you use the msysGit version distributed with\r\nGitExtensions or an earlier version of msysGit, tests will fail during\r\ninstallation of this module.  You can get the latest version of msysGit on the\r\nGoogle Code project page: [http://code.google.com/p/msysgit/downloads](http://code.google.com/p/msysgit/downloads)\r\n\r\n# ENVIRONMENT VARIABLES\r\n\r\nGit::Wrapper normally uses the first 'git' binary in your path, but if the\r\nGIT\\_WRAPPER\\_GIT environment variable is set, that value will be used instead.\r\n\r\n# SEE ALSO\r\n\r\n[VCI::VCS::Git](http://search.cpan.org/perldoc?VCI::VCS::Git) is the git implementation for [VCI](http://search.cpan.org/perldoc?VCI), a generic interface to\r\nversion-controle systems.\r\n\r\n[Other Perl Git Wrappers](https://metacpan.org/module/Git::Repository\\#OTHER-PERL-GIT-WRAPPERS)\r\nis a list of other Git interfaces in Perl. If [Git::Wrapper](http://search.cpan.org/perldoc?Git::Wrapper) doesn't scratch\r\nyour itch, possibly one of the modules listed there will.\r\n\r\nGit itself is at [http://git.or.cz](http://git.or.cz).\r\n\r\n# REPORTING BUGS & OTHER WAYS TO CONTRIBUTE\r\n\r\nThe code for this module is maintained on GitHub, at\r\n[https://github.com/genehack/Git-Wrapper](https://github.com/genehack/Git-Wrapper). If you have a patch, feel free to\r\nfork the repository and submit a pull request. If you find a bug, please open\r\nan issue on the project at GitHub. (We also watch the [http://rt.cpan.org](http://rt.cpan.org)\r\nqueue for Git::Wrapper, so feel free to use that bug reporting system if you\r\nprefer)\r\n\r\n# AUTHORS\r\n\r\n- Hans Dieter Pearcey <hdp@cpan.org>\r\n- Chris Prather <chris@prather.org>\r\n- John SJ Anderson <genehack@genehack.org>\r\n\r\n# COPYRIGHT AND LICENSE\r\n\r\nThis software is copyright (c) 2008 by Hans Dieter Pearcey.\r\n\r\nThis is free software; you can redistribute it and/or modify it under\r\nthe same terms as the Perl 5 programming language system itself.","tagline":"Perl wrapper for git(7) command line interface","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}